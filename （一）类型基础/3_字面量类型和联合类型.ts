/**
 * 了解了原始类型与对象类型以后，我们已经能完成简单场景的类型标注了。
 * 但这还远远不够，我们还可以让这些类型标注更精确一些。比如，有一个接口结构，它描述了响应的消息结构
 */

/**
 * 字面量类型（Literal Types）
 * - 它代表着比原始类型更精确的类型，同时也是原始类型的子类型。
 * - 字面量类型主要包括`字符串字面量类型`、`数字字面量类型`、`布尔字面量类型`和`对象字面量类型`，它们可以直接作为类型标注：
 */
const strValue: "louhaojie" = "louhaojie";
const numValue: 1000 = 1000;
const flagValue: true = true;

/**
 * 联合类型
 * - 它代表了一组类型的可用集合，只要最终赋值的类型属于联合类型的成员之一，就可以认为符合这个联合类型。
 * 这里有几点需要注意的：
 *  ● 对于联合类型中的函数类型，需要使用括号 () 包裹起来
 *  ● 函数类型并不存在字面量类型，因此这里的 (() => {}) 就是一个合法的函数类型
 *  ● 你可以在联合类型中进一步嵌套联合类型，但这些嵌套的联合类型最终都会被展平到第一级中
 */
let value: string | number | boolean | (() => void);

value = "hello typescript";
value = 100;
value = true;
value = () => {};
